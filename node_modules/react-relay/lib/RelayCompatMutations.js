/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var injectedCompatLoggingFunction = function injectedCompatLoggingFunction() {};

function injectCompatLoggingFunction(loggingFunction) {
  injectedCompatLoggingFunction = loggingFunction;
}

function commitUpdate(environment, config) {
  var moduleName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';

  var modernEnvironment = require("./RelayCompatEnvironment").getRelayModernEnvironment(environment);

  if (modernEnvironment) {
    injectedCompatLoggingFunction(moduleName, true);
    return require("relay-runtime").commitMutation(modernEnvironment, config);
  } else {
    var classicEnvironment = require("./RelayCompatEnvironment").getRelayClassicEnvironment(environment);

    !classicEnvironment ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayCompatMutations: Expected an object that conforms to the ' + '`RelayEnvironmentInterface`, got `%s`.', environment) : require("fbjs/lib/invariant")(false) : void 0;
    injectedCompatLoggingFunction(moduleName, false);
    return commitRelayClassicMutation( // getRelayClassicEnvironment returns a RelayEnvironmentInterface
    // (classic APIs), but we need the modern APIs on old core here.
    classicEnvironment, config);
  }
}

function applyUpdate(environment, config) {
  var moduleName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';

  var modernEnvironment = require("./RelayCompatEnvironment").getRelayModernEnvironment(environment);

  if (modernEnvironment) {
    injectedCompatLoggingFunction(moduleName, true);
    return require("relay-runtime").applyOptimisticMutation(modernEnvironment, config);
  } else {
    var classicEnvironment = require("./RelayCompatEnvironment").getRelayClassicEnvironment(environment);

    !classicEnvironment ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayCompatMutations: Expected an object that conforms to the ' + '`RelayEnvironmentInterface`, got `%s`.', environment) : require("fbjs/lib/invariant")(false) : void 0;
    injectedCompatLoggingFunction(moduleName, false);
    return applyRelayClassicMutation( // getRelayClassicEnvironment returns a RelayEnvironmentInterface
    // (classic APIs), but we need the modern APIs on old core here.
    classicEnvironment, config);
  }
}

function commitRelayClassicMutation(environment, _ref) {
  var configs = _ref.configs,
      mutation = _ref.mutation,
      onCompleted = _ref.onCompleted,
      onError = _ref.onError,
      optimisticResponse = _ref.optimisticResponse,
      variables = _ref.variables,
      uploadables = _ref.uploadables;
  var getRequest = environment.unstable_internal.getRequest;
  var operation = getRequest(mutation); // TODO: remove this check after we fix flow.

  if (typeof optimisticResponse === 'function') {
    process.env.NODE_ENV !== "production" ? require("fbjs/lib/warning")(false, 'RelayCompatMutations: Expected `optimisticResponse` to be an object, ' + 'received a function.') : void 0;
    optimisticResponse = optimisticResponse();
  }

  if (optimisticResponse) {
    optimisticResponse = validateOptimisticResponse(operation, optimisticResponse);
  }

  return environment.sendMutation({
    configs: configs || [],
    operation: operation,
    onCompleted: onCompleted,
    onError: onError,
    optimisticResponse: optimisticResponse,
    variables: variables,
    uploadables: uploadables
  });
}

function applyRelayClassicMutation(environment, _ref2) {
  var configs = _ref2.configs,
      mutation = _ref2.mutation,
      optimisticResponse = _ref2.optimisticResponse,
      variables = _ref2.variables;
  var getRequest = environment.unstable_internal.getRequest;
  var operation = getRequest(mutation);

  if (operation.operation !== 'mutation') {
    throw new Error('RelayCompatMutations: Expected mutation operation');
  } // RelayClassic can't update anything without response.


  if (!optimisticResponse) {
    return {
      dispose: function dispose() {}
    };
  }

  optimisticResponse = validateOptimisticResponse(operation, optimisticResponse);
  return environment.applyMutation({
    configs: configs || [],
    operation: operation,
    optimisticResponse: optimisticResponse,
    variables: variables
  });
}

function validateOptimisticResponse(operation, optimisticResponse) {
  if (operation.node.kind === 'Mutation' && operation.node.calls && operation.node.calls.length === 1) {
    var mutationRoot = operation.node.calls[0].name;

    if (optimisticResponse[mutationRoot]) {
      return optimisticResponse[mutationRoot];
    } else {
      process.env.NODE_ENV !== "production" ? require("fbjs/lib/warning")(false, 'RelayCompatMutations: Expected result from `optimisticResponse`' + 'to contain the mutation name `%s` as a property, got `%s`', mutationRoot, optimisticResponse) : void 0;
    }
  }

  return optimisticResponse;
}

module.exports = {
  applyUpdate: applyUpdate,
  commitUpdate: commitUpdate,
  injectCompatLoggingFunction: injectCompatLoggingFunction
};