/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var _extends2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/objectSpread"));

/**
 * `injectDefaultVariablesProvider()` allows classic versions of a container to
 * inject default variable values for a fragment via the arguments of any
 * references to it. This is useful for fragments that need to reference
 * global query constants (e.g. the device pixel ratio) but may be included
 * in classic queries that do not define the necessary param.
 */
var injectedDefaultVariablesProvider = null;

function injectDefaultVariablesProvider(variablesProvider) {
  !!injectedDefaultVariablesProvider ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'injectDefaultVariablesProvider must be called no more than once.') : require("fbjs/lib/invariant")(false) : void 0;
  injectedDefaultVariablesProvider = variablesProvider;
}
/**
 * Sets a logging function that logs whether a compat container was rendered in
 * a modern or classic environment.
 */


var injectedCompatLoggingFunction = function injectedCompatLoggingFunction() {};

function injectCompatLoggingFunction(loggingFunction) {
  injectedCompatLoggingFunction = loggingFunction;
}
/**
 * Creates a component class whose instances adapt to the
 * `context.relay.environment` in which they are rendered and which have the
 * necessary static methods (`getFragment()` etc) to be composed within classic
 * `Relay.Containers`.
 *
 * The returned constructor uses the given `createContainerForEnvironment` to
 * construct a new container type whenever a new environment is encountered;
 * while the constructor is being used for the same environment (the expected
 * majority case) this value is memoized to avoid creating unnecessary extra
 * container definitions or unwrapping the environment-specific fragment
 * defintions unnecessarily.
 */


function buildCompatContainer(ComponentClass, fragmentSpec, createContainerWithFragments) {
  var compatModuleName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'unknown';

  // Sanity-check user-defined fragment input
  var containerName = require("./ReactRelayContainerUtils").getContainerName(ComponentClass);

  require("./assertFragmentMap")(require("./ReactRelayContainerUtils").getComponentName(ComponentClass), fragmentSpec);

  var injectedDefaultVariables = null;

  function getDefaultVariables() {
    if (injectedDefaultVariables == null) {
      injectedDefaultVariables = injectedDefaultVariablesProvider ? injectedDefaultVariablesProvider() : {};
    }

    return injectedDefaultVariables;
  } // Similar to RelayContainer.getFragment(), except that this returns a
  // FragmentSpread in order to support referencing root variables.


  function getFragment(fragmentName, variableMapping) {
    injectedCompatLoggingFunction(compatModuleName, false);
    var taggedNode = fragmentSpec[fragmentName];
    !taggedNode ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'ReactRelayCompatContainerBuilder: Expected a fragment named `%s` to be defined ' + 'on `%s`.', fragmentName, containerName) : require("fbjs/lib/invariant")(false) : void 0;

    var fragment = require("./RelayGraphQLTag").getClassicFragment(taggedNode);

    var args = (0, _objectSpread2["default"])({}, getDefaultVariables(), variableMapping || {});
    return {
      kind: 'FragmentSpread',
      args: args,
      fragment: fragment
    };
  }

  function hasVariable(variableName) {
    return Object.keys(fragmentSpec).some(function (fragmentName) {
      var fragment = require("./RelayGraphQLTag").getClassicFragment(fragmentSpec[fragmentName]);

      return fragment.argumentDefinitions.some(function (argDef) {
        return argDef.name === variableName;
      });
    });
  } // Memoize a container for the last environment instance encountered


  var environment;
  var Container;

  function ContainerConstructor(props) {
    if (Container == null || props.__relayContext.environment !== environment) {
      environment = props.__relayContext.environment;
      injectedCompatLoggingFunction(compatModuleName, require("relay-runtime").isRelayModernEnvironment(environment));
      var getFragmentFromTag = environment.unstable_internal.getFragment;

      var _fragments = require("fbjs/lib/mapObject")(fragmentSpec, getFragmentFromTag);

      Container = createContainerWithFragments(ComponentClass, _fragments); // Attach static lifecycle to wrapper component so React can see it.

      ContainerConstructor.getDerivedStateFromProps = Container.getDerivedStateFromProps;
    } // $FlowFixMe


    return new Container(props);
  }

  function forwardRef(props, ref) {
    var context = require("./readContext")(require("./ReactRelayContext"));

    !context ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, "".concat(containerName, " tried to render a context that was ") + "not valid this means that ".concat(containerName, " was rendered outside of a ") + 'query renderer.') : require("fbjs/lib/invariant")(false) : void 0;
    return require("react").createElement(ContainerConstructor, (0, _extends2["default"])({}, props, {
      __relayContext: context,
      componentRef: props.componentRef || ref
    }));
  }

  forwardRef.displayName = containerName;

  var ForwardContainer = require("react").forwardRef(forwardRef); // Classic container static methods

  /* $FlowFixMe(>=0.89.0 site=www,mobile,react_native_fb,oss) Suppressing errors
   * found while preparing to upgrade to 0.89.0 */


  ForwardContainer.getFragment = getFragment;
  /* $FlowFixMe(>=0.89.0 site=www,mobile,react_native_fb,oss) Suppressing errors
   * found while preparing to upgrade to 0.89.0 */

  ForwardContainer.getFragmentNames = function () {
    return Object.keys(fragmentSpec);
  };
  /* $FlowFixMe(>=0.89.0 site=www,mobile,react_native_fb,oss) Suppressing errors
   * found while preparing to upgrade to 0.89.0 */


  ForwardContainer.hasFragment = function (name) {
    return fragmentSpec.hasOwnProperty(name);
  };
  /* $FlowFixMe(>=0.89.0 site=www,mobile,react_native_fb,oss) Suppressing errors
   * found while preparing to upgrade to 0.89.0 */


  ForwardContainer.hasVariable = hasVariable;

  if (process.env.NODE_ENV !== "production") {
    /* $FlowFixMe(>=0.89.0 site=www,mobile,react_native_fb,oss) Suppressing
     * errors found while preparing to upgrade to 0.89.0 */
    ForwardContainer.__ComponentClass = ComponentClass;
  } // Create a back-reference from the Component to the Container for cases
  // where a Classic Component might refer to itself, expecting a Container.


  ComponentClass.__container__ = ForwardContainer;
  return ForwardContainer;
}

module.exports = {
  injectDefaultVariablesProvider: injectDefaultVariablesProvider,
  injectCompatLoggingFunction: injectCompatLoggingFunction,
  buildCompatContainer: buildCompatContainer
};