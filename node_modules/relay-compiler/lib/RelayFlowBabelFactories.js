/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict
 * @format
 */
'use strict';

/**
 * type NAME = any;
 */
function anyTypeAlias(name) {
  return require("@babel/types").typeAlias(require("@babel/types").identifier(name), null, require("@babel/types").anyTypeAnnotation());
}
/**
 * {|
 *   PROPS
 * |}
 */


function exactObjectTypeAnnotation(props) {
  var typeAnnotation = require("@babel/types").objectTypeAnnotation(props);

  typeAnnotation.exact = true;
  return typeAnnotation;
}
/**
 * export type NAME = TYPE
 */


function exportType(name, type) {
  return require("@babel/types").exportNamedDeclaration(require("@babel/types").typeAlias(require("@babel/types").identifier(name), null, type), [], null);
}
/**
 * import type {NAMES[0], NAMES[1], ...} from 'MODULE';
 */


function importTypes(names, module) {
  var importDeclaration = require("@babel/types").importDeclaration(names.map(function (name) {
    return require("@babel/types").importSpecifier(require("@babel/types").identifier(name), require("@babel/types").identifier(name));
  }), require("@babel/types").stringLiteral(module));

  importDeclaration.importKind = 'type';
  return importDeclaration;
}
/**
 * Create an intersection type if needed.
 *
 * TYPES[0] & TYPES[1] & ...
 */


function intersectionTypeAnnotation(types) {
  !(types.length > 0) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayFlowBabelFactories: cannot create an intersection of 0 types') : require("fbjs/lib/invariant")(false) : void 0;
  return types.length === 1 ? types[0] : require("@babel/types").intersectionTypeAnnotation(types);
}

function lineComments() {
  for (var _len = arguments.length, lines = new Array(_len), _key = 0; _key < _len; _key++) {
    lines[_key] = arguments[_key];
  }

  /* $FlowFixMe(>=0.70.0) This comment suppresses an error found when
   * Flow v0.70 was deployed. To see the error delete this comment and
   * run Flow. */
  return lines.map(function (line) {
    return {
      type: 'CommentLine',
      value: ' ' + line
    };
  });
}
/**
 * $ReadOnlyArray<TYPE>
 */


function readOnlyArrayOfType(thing) {
  return require("@babel/types").genericTypeAnnotation(require("@babel/types").identifier('$ReadOnlyArray'), require("@babel/types").typeParameterInstantiation([thing]));
}
/**
 * +KEY: VALUE
 */


function readOnlyObjectTypeProperty(key, value) {
  var prop = require("@babel/types").objectTypeProperty(require("@babel/types").identifier(key), value);

  prop.variance = require("@babel/types").variance('plus');
  return prop;
}

function stringLiteralTypeAnnotation(value) {
  return require("@babel/types").stringLiteralTypeAnnotation(value);
}
/**
 * Create a union type if needed.
 *
 * TYPES[0] | TYPES[1] | ...
 */


function unionTypeAnnotation(types) {
  !(types.length > 0) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayFlowBabelFactories: cannot create a union of 0 types') : require("fbjs/lib/invariant")(false) : void 0;
  return types.length === 1 ? types[0] : require("@babel/types").unionTypeAnnotation(types);
}

module.exports = {
  anyTypeAlias: anyTypeAlias,
  exactObjectTypeAnnotation: exactObjectTypeAnnotation,
  exportType: exportType,
  importTypes: importTypes,
  intersectionTypeAnnotation: intersectionTypeAnnotation,
  lineComments: lineComments,
  readOnlyArrayOfType: readOnlyArrayOfType,
  readOnlyObjectTypeProperty: readOnlyObjectTypeProperty,
  stringLiteralTypeAnnotation: stringLiteralTypeAnnotation,
  unionTypeAnnotation: unionTypeAnnotation
};