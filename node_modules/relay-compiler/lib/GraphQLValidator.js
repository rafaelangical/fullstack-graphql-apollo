/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

function validateOrThrow(document, schema, rules) {
  var validationErrors = require("graphql").validate(schema, document, rules);

  if (validationErrors && validationErrors.length > 0) {
    var formattedErrors = validationErrors.map(require("graphql").formatError);
    var errorMessages = validationErrors.map(function (e) {
      return e.toString();
    });
    var error = new Error(require("util").format('You supplied a GraphQL document with validation errors:\n%s', errorMessages.join('\n')));
    error.validationErrors = formattedErrors;
    throw error;
  }
}

module.exports = {
  GLOBAL_RULES: [require("graphql").KnownArgumentNamesRule,
  /* Some rules are not enabled (potentially non-exhaustive)
   *
   * - KnownFragmentNamesRule: RelayClassic generates fragments at runtime,
   *   so RelayCompat queries might reference fragments unknown in build time.
   * - NoFragmentCyclesRule: Because of @argumentDefinitions, this validation
   *   incorrectly flags a subset of fragments using @include/@skip as
   *   recursive.
   * - NoUndefinedVariablesRule: Because of @argumentDefinitions, this
   *   validation incorrectly marks some fragment variables as undefined.
   * - NoUnusedFragmentsRule: Queries generated dynamically with RelayCompat
   *   might use unused fragments.
   * - OverlappingFieldsCanBeMergedRule: RelayClassic auto-resolves
   *   overlapping fields by generating aliases.
   */
  require("graphql").NoUnusedVariablesRule, require("graphql").UniqueArgumentNamesRule, require("graphql").UniqueFragmentNamesRule, require("graphql").UniqueInputFieldNamesRule, require("graphql").UniqueOperationNamesRule, require("graphql").UniqueVariableNamesRule],
  LOCAL_RULES: [
  /* Some rules are not enabled (potentially non-exhaustive)
   *
   * - FieldsOnCorrectTypeRule: is not aware of @fixme_fat_interface.
   * - KnownDirectivesRule: doesn't pass with @arguments and other Relay
   *   directives.
   * - ScalarLeafsRule: is violated by the @match directive since these rules
   *   run before any transform steps.
   */
  require("graphql").FragmentsOnCompositeTypesRule, require("graphql").KnownTypeNamesRule, require("graphql").LoneAnonymousOperationRule, require("graphql").PossibleFragmentSpreadsRule, require("graphql").ValuesOfCorrectTypeRule, require("graphql").VariablesAreInputTypesRule, require("graphql").VariablesInAllowedPositionRule],
  validate: require("./GraphQLCompilerProfiler").instrument(validateOrThrow, 'GraphQLValidator.validate')
};