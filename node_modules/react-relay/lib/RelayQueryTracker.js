/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict-local
 * @format
 */
'use strict';

var _toConsumableArray2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/toConsumableArray"));

var RelayQueryTracker =
/*#__PURE__*/
function () {
  function RelayQueryTracker() {
    this._trackedNodesByID = {};
  }

  var _proto = RelayQueryTracker.prototype;

  _proto.trackNodeForID = function trackNodeForID(node, dataID) {
    this._trackedNodesByID[dataID] = this._trackedNodesByID[dataID] || {
      trackedNodes: [],
      isMerged: false
    };

    this._trackedNodesByID[dataID].trackedNodes.push(node);

    this._trackedNodesByID[dataID].isMerged = false;
  };
  /**
   * Get the children that are tracked for the given `dataID`, if any.
   */


  _proto.getTrackedChildrenForID = function getTrackedChildrenForID(dataID) {
    var trackedNodesByID = this._trackedNodesByID[dataID];

    if (!trackedNodesByID) {
      return [];
    }

    var isMerged = trackedNodesByID.isMerged,
        trackedNodes = trackedNodesByID.trackedNodes;

    if (!isMerged) {
      var trackedChildren = [];
      trackedNodes.forEach(function (trackedQuery) {
        trackedChildren.push.apply(trackedChildren, (0, _toConsumableArray2["default"])(trackedQuery.getChildren()));
      });
      trackedNodes.length = 0;
      trackedNodesByID.isMerged = true;

      var containerNode = require("./RelayQuery").Fragment.build('RelayQueryTracker', require("./RelayNodeInterface").NODE_TYPE, trackedChildren);

      containerNode = require("./flattenRelayQuery")(containerNode);

      if (containerNode) {
        trackedNodes.push(containerNode);
      }
    }

    var trackedNode = trackedNodes[0];

    if (trackedNode) {
      return trackedNode.getChildren();
    }

    return [];
  };
  /**
   * Removes all nodes that are tracking the given DataID from the
   * query-tracker.
   */


  _proto.untrackNodesForID = function untrackNodesForID(dataID) {
    delete this._trackedNodesByID[dataID];
  };

  return RelayQueryTracker;
}();

module.exports = RelayQueryTracker;