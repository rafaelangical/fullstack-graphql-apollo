/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var _taggedTemplateLiteral2 = require("@babel/runtime/helpers/interopRequireDefault")(require("./taggedTemplateLiteral"));

var _inheritsLoose2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/inheritsLoose"));

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n    fragment RelayModernFlowtest_users on User @relay(plural: true) {\n      name\n    }\n  "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n    fragment RelayModernFlowtest_user on User {\n      name\n    }\n  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n    fragment RelayModernFlowtest_badref on User {\n      id\n      # Note: this test includes a reference, but *not the right one*.\n      ...RelayModernFlowtest_user\n    }\n  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n    fragment RelayModernFlowtest_notref on User {\n      id\n      ...RelayModernFlowtest_user\n    }\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var NotReferencedTest_ =
/*#__PURE__*/
function (_React$Component) {
  (0, _inheritsLoose2["default"])(NotReferencedTest_, _React$Component);

  function NotReferencedTest_() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = NotReferencedTest_.prototype;

  _proto.render = function render() {
    return null;
  };

  return NotReferencedTest_;
}(require("react").Component);

var NotReferencedTest = require("./ReactRelayPublic").createFragmentContainer(NotReferencedTest_, {
  notref: require("./ReactRelayPublic").graphql(_templateObject())
});

var BadReferenceTest_ =
/*#__PURE__*/
function (_React$Component2) {
  (0, _inheritsLoose2["default"])(BadReferenceTest_, _React$Component2);

  function BadReferenceTest_() {
    return _React$Component2.apply(this, arguments) || this;
  }

  var _proto2 = BadReferenceTest_.prototype;

  _proto2.render = function render() {
    this.props.badref.id; // $FlowExpectedError

    this.props.badref.name; // $FlowExpectedError The notref fragment was not used.

    return require("react").createElement(NotReferencedTest, {
      notref: this.props.badref
    });
  };

  return BadReferenceTest_;
}(require("react").Component);

var BadReferenceTest = require("./ReactRelayPublic").createFragmentContainer(BadReferenceTest_, {
  badref: require("./ReactRelayPublic").graphql(_templateObject2())
});

require("react").createElement(BadReferenceTest, {
  badref: someRef
});

var SingularTest =
/*#__PURE__*/
function (_React$Component3) {
  (0, _inheritsLoose2["default"])(SingularTest, _React$Component3);

  function SingularTest() {
    return _React$Component3.apply(this, arguments) || this;
  }

  var _proto3 = SingularTest.prototype;

  _proto3.render = function render() {
    require("nullthrows")(this.props.user.name); // $FlowExpectedError


    this.props.nullableUser.name; // $FlowExpectedError

    this.props.optionalUser.name;

    require("nullthrows")(require("nullthrows")(this.props.nullableUser).name);

    require("nullthrows")(require("nullthrows")(this.props.optionalUser).name);

    return null;
  };

  return SingularTest;
}(require("react").Component);

SingularTest = require("./ReactRelayPublic").createFragmentContainer(SingularTest, {
  user: require("./ReactRelayPublic").graphql(_templateObject3())
});

var PluralTest =
/*#__PURE__*/
function (_React$Component4) {
  (0, _inheritsLoose2["default"])(PluralTest, _React$Component4);

  function PluralTest() {
    return _React$Component4.apply(this, arguments) || this;
  }

  var _proto4 = PluralTest.prototype;

  _proto4.render = function render() {
    var names = this.props.users.map(function (user) {
      return user.name;
    }).filter(Boolean);
    names; // $FlowExpectedError

    names;
    return null;
  };

  return PluralTest;
}(require("react").Component);

PluralTest = require("./ReactRelayPublic").createFragmentContainer(PluralTest, {
  users: require("./ReactRelayPublic").graphql(_templateObject4())
});

function cb() {} // $FlowExpectedError - can't pass null for user


require("react").createElement(SingularTest, {
  onClick: cb,
  string: "x",
  user: null,
  nullableUser: null
}); // $FlowExpectedError - user is required


require("react").createElement(SingularTest, {
  onClick: cb,
  string: "x",
  nullableUser: null
}); // $FlowExpectedError - can't pass non-user ref for user


require("react").createElement(SingularTest, {
  onClick: cb,
  string: "x",
  user: nonUserRef,
  nullableUser: null
}); // $FlowExpectedError - `cb` prop is not a function


require("react").createElement(SingularTest, {
  onClick: "cb",
  string: "x",
  user: aUserRef,
  nullableUser: null
}); // $FlowExpectedError - `string` prop is not a string


require("react").createElement(SingularTest, {
  onClick: cb,
  string: 1,
  user: aUserRef,
  nullableUser: null
});

require("react").createElement(SingularTest, {
  onClick: cb,
  string: "x",
  user: aUserRef,
  nullableUser: null
});

require("react").createElement(SingularTest, {
  onClick: cb,
  string: "x",
  user: aUserRef,
  nullableUser: aUserRef
});

require("react").createElement(SingularTest, {
  onClick: cb,
  string: "x",
  user: aUserRef,
  nullableUser: null,
  optionalUser: aUserRef
}); // $FlowExpectedError - optional, not nullable!


require("react").createElement(SingularTest, {
  string: "x",
  user: aUserRef,
  nullableUser: null,
  optionalUser: null
});

require("react").createElement(SingularTest, {
  string: "x",
  onClick: cb,
  user: aComplexUserRef,
  nullableUser: aComplexUserRef,
  optionalUser: aComplexUserRef
}); // $FlowExpectedError - can't pass null for user


require("react").createElement(PluralTest, {
  users: null,
  nullableUsers: null
}); // $FlowExpectedError - users is required


require("react").createElement(PluralTest, {
  nullableUsers: null
}); // $FlowExpectedError - can't pass non-user refs for user


require("react").createElement(PluralTest, {
  users: [nonUserRef],
  nullableUsers: null
});

require("react").createElement(PluralTest, {
  users: usersRef,
  nullableUsers: null
});

require("react").createElement(PluralTest, {
  users: [oneOfUsersRef],
  nullableUsers: null
});

require("react").createElement(PluralTest, {
  users: [oneOfUsersRef],
  nullableUsers: null
});

require("react").createElement(PluralTest, {
  users: usersRef,
  nullableUsers: [oneOfUsersRef]
});

require("react").createElement(PluralTest, {
  users: usersRef,
  nullableUsers: null,
  optionalUsers: usersRef
}); // $FlowExpectedError - optional, not nullable!


require("react").createElement(PluralTest, {
  users: usersRef,
  nullableUsers: null,
  optionalUsers: null
});

var AnyTest =
/*#__PURE__*/
function (_React$Component5) {
  (0, _inheritsLoose2["default"])(AnyTest, _React$Component5);

  function AnyTest() {
    return _React$Component5.apply(this, arguments) || this;
  }

  return AnyTest;
}(require("react").Component);

AnyTest = require("./ReactRelayPublic").createFragmentContainer(AnyTest, {});

require("react").createElement(AnyTest, {
  anything: 42,
  anyFunction: function anyFunction() {},
  maybeFunction: null,
  anyObject: {}
});

require("react").createElement(AnyTest, {
  anything: 42,
  anyFunction: function anyFunction() {},
  maybeFunction: function maybeFunction() {},
  anyObject: {}
}); // $FlowExpectedError - optional function cannot be null


require("react").createElement(AnyTest, {
  anything: 42,
  anyFunction: function anyFunction() {},
  optionalFunction: function optionalFunction() {},
  anyObject: {}
}); // $FlowExpectedError - can't pass {} for a Function


require("react").createElement(AnyTest, {
  anything: 42,
  anyFunction: {},
  maybeFunction: function maybeFunction() {},
  anyObject: {}
});