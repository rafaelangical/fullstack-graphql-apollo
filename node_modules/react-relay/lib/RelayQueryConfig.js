/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var _objectSpread2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/objectSpread"));

/**
 * Configures the root queries and initial variables that define the context in
 * which the top-level component's fragments are requested. This is meant to be
 * subclassed, of which instances are supplied to `RelayRootContainer`.
 */
var RelayQueryConfig =
/*#__PURE__*/
function () {
  // TODO: Deprecate `routeName`, #8478719.
  function RelayQueryConfig(initialVariables) {
    !(this.constructor !== RelayQueryConfig) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayQueryConfig: Abstract class cannot be instantiated.') : require("fbjs/lib/invariant")(false) : void 0;
    Object.defineProperty(this, 'name', {
      enumerable: true,
      value: this.constructor.routeName
    });
    Object.defineProperty(this, 'params', {
      enumerable: true,
      value: this.prepareVariables((0, _objectSpread2["default"])({}, initialVariables)) || {}
    });
    Object.defineProperty(this, 'queries', {
      enumerable: true,
      value: (0, _objectSpread2["default"])({}, this.constructor.queries)
    });

    if (process.env.NODE_ENV !== "production") {
      Object.freeze(this.params);
      Object.freeze(this.queries);
    }
  }
  /**
   * Provides an opportunity to perform additional logic on the variables.
   * Child class should override this function to perform custom logic.
   */


  var _proto = RelayQueryConfig.prototype;

  _proto.prepareVariables = function prepareVariables(prevVariables) {
    return prevVariables;
  };

  return RelayQueryConfig;
}();

module.exports = RelayQueryConfig;