/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict-local
 * @format
 */
'use strict';

var _inheritsLoose2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/inheritsLoose"));

/**
 * @internal
 *
 * `RelayQueryTransform` is a `RelayQueryVisitor` subclass that simplifies the
 * process of traversing, filtering, or transforming a Relay Query.
 *
 * The traversal is a map operation from `RelayQuery` nodes to nodes. The
 * default implementation traverses all nodes and maps each one to its
 * original value (ie. a no-op).
 *
 * Just like `RelayQueryVisitor`, subclasses of `RelayQueryTransform` can
 * optionally implement methods to customize the traversal and mapping of
 * different RelayQuery node types:
 *
 * - `visitField(field, state)`: Returns the new value for the visited field, or
 *   `null` to remove it from the output.
 * - `visitFragment(fragment, state)`: Returns the new value for the visited
 *   fragment, or `null` to remove it from the output.
 * - `visitQuery(fragment, state)`: Returns the new value for the top-level
 *   query, or `null` to transform the entire query out of existence.
 *
 * There are two additional methods for controlling the traversal:
 *
 * - `traverse(parent, state)`: Returns a cloned copy of the parent node after
 *   processing all of its children. Does not clone if nothing changed.
 * - `visit(child, state)`: Processes the child node, calling the appropriate
 *   `visit{Field,Fragment,Root` method based on the node type.
 *
 * All of these methods may return the original node in order to leave it
 * intact.
 *
 * @see RelayQueryVisitor
 */
var RelayQueryTransform =
/*#__PURE__*/
function (_RelayQueryVisitor) {
  (0, _inheritsLoose2["default"])(RelayQueryTransform, _RelayQueryVisitor);

  function RelayQueryTransform() {
    return _RelayQueryVisitor.apply(this, arguments) || this;
  }

  var _proto = RelayQueryTransform.prototype;

  _proto.traverse = function traverse(node, nextState) {
    if (!node.canHaveSubselections()) {
      return node;
    }

    var nextChildren;
    this.traverseChildren(node, nextState, function (child, index, children) {
      var prevChild = children[index];
      var nextChild = this.visit(prevChild, nextState);

      if (nextChild !== prevChild) {
        nextChildren = nextChildren || children.slice(0, index);
      }

      if (nextChildren && nextChild) {
        nextChildren.push(nextChild);
      }
    }, this);

    if (nextChildren) {
      if (!nextChildren.length) {
        return null;
      }

      return node.clone(nextChildren);
    }

    return node;
  };

  return RelayQueryTransform;
}(require("./RelayQueryVisitor"));

module.exports = RelayQueryTransform;