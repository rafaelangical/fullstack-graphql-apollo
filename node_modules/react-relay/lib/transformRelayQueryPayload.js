/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var _inheritsLoose2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/inheritsLoose"));

/**
 * Transforms "client" payloads with property keys that match the "application"
 * names (i.e. property names are schema names or aliases) into "server"
 * payloads that match what the server would return for the given query (i.e.
 * property names are serialization keys instead).
 */
function transformRelayQueryPayload(root, clientData, config) {
  if (clientData == null) {
    return clientData;
  } else {
    return require("fbjs/lib/mapObject")(clientData, function (item) {
      // Handle both FB & OSS formats for root payloads on plural calls: FB
      // returns objects, OSS returns arrays.
      if (Array.isArray(item)) {
        return item.map(function (innerItem) {
          return transform(root, innerItem, config);
        });
      }

      return transform(root, item, config);
    });
  }
}

function transform(root, clientData, config) {
  if (clientData == null) {
    return clientData;
  }

  var transformer = new RelayPayloadTransformer(config);
  var serverData = {};
  transformer.visit(root, {
    client: clientData,
    server: serverData
  });
  return serverData;
}

var RelayPayloadTransformer =
/*#__PURE__*/
function (_RelayQueryVisitor) {
  (0, _inheritsLoose2["default"])(RelayPayloadTransformer, _RelayQueryVisitor);

  function RelayPayloadTransformer(config) {
    var _this;

    _this = _RelayQueryVisitor.call(this) || this;

    if (config) {
      _this._getKeyForClientData = config.getKeyForClientData;
      _this._traverseChildren = config.traverseChildren;
    }

    return _this;
  }

  var _proto = RelayPayloadTransformer.prototype;

  _proto._getKeyForClientData = function _getKeyForClientData(field) {
    return field.getApplicationName();
  };

  _proto.traverseChildren = function traverseChildren(node, nextState, callback, context) {
    if (this._traverseChildren) {
      this._traverseChildren(node, callback, context);
    } else {
      _RelayQueryVisitor.prototype.traverseChildren.call(this, node, nextState, callback, context);
    }
  };

  _proto.visitField = function visitField(node, state) {
    var _this2 = this;

    var client = state.client,
        server = state.server;

    var applicationName = this._getKeyForClientData(node);

    var serializationKey = node.getSerializationKey();
    var clientData = client[applicationName];
    var serverData = server[serializationKey];

    if (!client.hasOwnProperty(applicationName)) {
      return;
    } else if (!node.canHaveSubselections() || clientData == null) {
      server[serializationKey] = clientData;
    } else if (Array.isArray(clientData)) {
      if (serverData == null) {
        server[serializationKey] = serverData = [];
      }

      clientData.forEach(function (clientItem, index) {
        !Array.isArray(serverData) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayPayloadTransformer: Got conflicting values for field `%s`: ' + 'expected values to be arrays.', applicationName) : require("fbjs/lib/invariant")(false) : void 0;

        if (clientItem == null) {
          serverData[index] = clientItem;
          return;
        }

        var serverItem = serverData && serverData[index];

        if (serverItem == null) {
          serverData[index] = serverItem = {};
        }
        /* $FlowFixMe - Flow error detected during the deployment of v0.38.0. To
         * see the error, remove this comment and run flow */


        _this2.traverse(node, {
          client: clientItem,
          server: serverItem
        });
      });
    } else {
      !(typeof clientData === 'object' && clientData !== null) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayPayloadTransformer: Expected an object value for field `%s`.', applicationName) : require("fbjs/lib/invariant")(false) : void 0;
      !(serverData == null || typeof serverData === 'object') ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayPayloadTransformer: Got conflicting values for field `%s`: ' + 'expected values to be objects.', applicationName) : require("fbjs/lib/invariant")(false) : void 0;

      if (serverData == null) {
        server[serializationKey] = serverData = {};
      }

      this.traverse(node, {
        client: clientData,
        server: serverData
      });
    }
  };

  return RelayPayloadTransformer;
}(require("./RelayQueryVisitor"));

module.exports = transformRelayQueryPayload;