/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

/**
 * @internal
 *
 * `RelayNetworkLayer` provides a method to inject custom network behavior.
 */
var RelayNetworkLayer =
/*#__PURE__*/
function () {
  function RelayNetworkLayer() {
    this._implementation = null;
    this._queue = null;
    this._subscribers = [];
  }
  /**
   * @internal
   */


  var _proto = RelayNetworkLayer.prototype;

  _proto.injectDefaultImplementation = function injectDefaultImplementation(implementation) {
    if (this._defaultImplementation) {
      process.env.NODE_ENV !== "production" ? require("fbjs/lib/warning")(false, 'RelayNetworkLayer: Call received to injectDefaultImplementation(), ' + 'but a default layer was already injected.') : void 0;
    }

    this._defaultImplementation = implementation;
  };

  _proto.injectImplementation = function injectImplementation(implementation) {
    if (this._implementation) {
      process.env.NODE_ENV !== "production" ? require("fbjs/lib/warning")(false, 'RelayNetworkLayer: Call received to injectImplementation(), but ' + 'a layer was already injected.') : void 0;
    }

    this._implementation = implementation;
  };

  _proto.addNetworkSubscriber = function addNetworkSubscriber(queryCallback, mutationCallback) {
    var _this = this;

    var index = this._subscribers.length;

    this._subscribers.push({
      queryCallback: queryCallback,
      mutationCallback: mutationCallback
    });

    return {
      remove: function remove() {
        delete _this._subscribers[index];
      }
    };
  };

  _proto.sendMutation = function sendMutation(mutationRequest) {
    var implementation = this._getImplementation();

    this._subscribers.forEach(function (_ref) {
      var mutationCallback = _ref.mutationCallback;

      if (mutationCallback) {
        mutationCallback(mutationRequest);
      }
    });

    var maybePromise = implementation.sendMutation(mutationRequest);

    if (maybePromise) {
      require("./throwFailedPromise")(Promise.resolve(maybePromise));
    }
  };

  _proto.sendQueries = function sendQueries(queryRequests) {
    profileQueue(queryRequests);

    var implementation = this._getImplementation();

    this._subscribers.forEach(function (_ref2) {
      var queryCallback = _ref2.queryCallback;

      if (queryCallback) {
        queryRequests.forEach(function (request) {
          queryCallback(request);
        });
      }
    });

    var maybePromise = implementation.sendQueries(queryRequests);

    if (maybePromise) {
      require("./throwFailedPromise")(Promise.resolve(maybePromise));
    }
  };

  _proto.supports = function supports() {
    var implementation = this._getImplementation();

    for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
      options[_key] = arguments[_key];
    }

    return implementation.supports.apply(implementation, options);
  };

  _proto._getImplementation = function _getImplementation() {
    var implementation = this._implementation || this._defaultImplementation;
    !implementation ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayNetworkLayer: Use `RelayEnvironment.injectNetworkLayer` to ' + 'configure a network layer.') : require("fbjs/lib/invariant")(false) : void 0;
    return implementation;
  };
  /**
   * Schedules the supplied `query` to be sent to the server.
   *
   * This is a low-level transport API; application code should use higher-level
   * interfaces exposed by RelayContainer for retrieving data transparently via
   * queries defined on components.
   */


  _proto.fetchRelayQuery = function fetchRelayQuery(query) {
    var _this2 = this;

    var currentQueue = this._queue || [];

    if (!this._queue) {
      this._queue = currentQueue;

      require("fbjs/lib/resolveImmediate")(function () {
        _this2._queue = null;

        _this2.sendQueries(currentQueue);
      });
    }

    var request = new (require("./RelayQueryRequest"))(query);
    currentQueue.push(request);
    return request.getPromise();
  };

  return RelayNetworkLayer;
}();
/**
 * Profiles time from request to receiving the first server response.
 */


function profileQueue(currentQueue) {
  // TODO #8783781: remove aggregate `fetchRelayQuery` profiler
  var firstResultProfiler = require("relay-runtime").RelayProfiler.profile('fetchRelayQuery');

  currentQueue.forEach(function (query) {
    var profiler = require("relay-runtime").RelayProfiler.profile('fetchRelayQuery.query', query.getQuery().getName());

    var onSettle = function onSettle() {
      profiler.stop();

      if (firstResultProfiler) {
        firstResultProfiler.stop();
        firstResultProfiler = null;
      }
    };

    query.getPromise().then(onSettle, onSettle)["catch"](function (error) {
      setTimeout(function () {
        throw error;
      }, 0);
    });
  });
}

require("relay-runtime").RelayProfiler.instrumentMethods(RelayNetworkLayer.prototype, {
  sendMutation: 'RelayNetworkLayer.sendMutation',
  sendQueries: 'RelayNetworkLayer.sendQueries'
});

module.exports = RelayNetworkLayer;