/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var _objectSpread2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/objectSpread"));

var MetadataKey = {
  DATA_ID: '__dataID__',
  FILTER_CALLS: '__filterCalls__',
  FORCE_INDEX: '__forceIndex__',
  MUTATION_IDS: '__mutationIDs__',
  MUTATION_STATUS: '__mutationStatus__',
  PATH: '__path__',
  RANGE: '__range__',
  RESOLVED_DEFERRED_FRAGMENTS: '__resolvedDeferredFragments__',
  RESOLVED_FRAGMENT_MAP: '__resolvedFragmentMap__',
  RESOLVED_FRAGMENT_MAP_GENERATION: '__resolvedFragmentMapGeneration__',
  STATUS: '__status__'
};
var metadataKeyLookup = {};
Object.keys(MetadataKey).forEach(function (name) {
  metadataKeyLookup[MetadataKey[name]] = true;
});
/**
 * Records are plain objects with special metadata properties.
 */

var RelayRecord = {
  MetadataKey: MetadataKey,
  create: function create(dataID) {
    return {
      __dataID__: dataID
    };
  },
  createWithFields: function createWithFields(dataID, fields) {
    return (0, _objectSpread2["default"])({
      __dataID__: dataID
    }, fields);
  },
  isRecord: function isRecord(maybeRecord) {
    return typeof maybeRecord === 'object' && maybeRecord != null && !Array.isArray(maybeRecord) && typeof maybeRecord.__dataID__ === 'string';
  },
  getRecord: function getRecord(maybeRecord) {
    if (RelayRecord.isRecord(maybeRecord)) {
      return maybeRecord;
    } else {
      return null;
    }
  },
  getDataID: function getDataID(record) {
    return record.__dataID__;
  },
  getDataIDForObject: function getDataIDForObject(maybeRecord) {
    return maybeRecord.__dataID__;
  },

  /**
   * Checks whether the given ID was created on the client, as opposed to an ID
   * that's understood by the server as well.
   */
  isClientID: function isClientID(dataID) {
    return dataID.indexOf('client:') === 0;
  },
  isMetadataKey: function isMetadataKey(key) {
    return metadataKeyLookup.hasOwnProperty(key);
  }
};
module.exports = RelayRecord;