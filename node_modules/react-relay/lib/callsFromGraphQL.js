/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

/**
 * @internal
 *
 * Convert from GraphQL call nodes to plain object `{name,value}` calls.
 */
function callsFromGraphQL(concreteCalls, variables) {
  // $FlowIssue: ConcreteCall should flow into CallOrDirective
  var callsOrDirectives = concreteCalls;
  var orderedCalls = [];

  for (var ii = 0; ii < callsOrDirectives.length; ii++) {
    var callOrDirective = callsOrDirectives[ii];
    var value = callOrDirective.value;

    if (value != null) {
      if (Array.isArray(value)) {
        value = value.map(function (arg) {
          return getCallValue(arg, variables);
        });
      } else if (value.kind === 'BatchCallVariable') {
        // Batch calls are handled separately
        value = null;
      } else {
        value = getCallValue(value, variables);
      }
    }

    var metadata = callOrDirective.metadata,
        name = callOrDirective.name;
    var orderedCall = {
      name: name,
      value: value
    };

    if (metadata && metadata.type) {
      orderedCall.type = metadata.type;
    }

    orderedCalls.push(orderedCall);
  }

  return orderedCalls;
}

function getCallValue(concreteValue, variables) {
  var callValue;

  if (concreteValue.kind === 'CallValue') {
    callValue = concreteValue.callValue;
  } else {
    var variableName = concreteValue.callVariableName;
    !variables.hasOwnProperty(variableName) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'callsFromGraphQL(): Expected a declared value for variable, `$%s`.', variableName) : require("fbjs/lib/invariant")(false) : void 0;
    callValue = variables[variableName];
  } // Perform a shallow check to ensure the value conforms to `CallValue` type:
  // For performance reasons, skip recursively testing array/object values.


  var valueType = typeof callValue;
  !(callValue == null || valueType === 'boolean' || valueType === 'number' || valueType === 'string' || valueType === 'object') ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'callsFromGraphQL(): Expected argument value `%s` to either be null or a ' + 'boolean, number, string, or array/object.', JSON.stringify(callValue)) : require("fbjs/lib/invariant")(false) : void 0;
  return callValue;
}

module.exports = callsFromGraphQL;