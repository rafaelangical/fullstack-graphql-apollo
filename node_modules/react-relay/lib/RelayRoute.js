/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

var _inheritsLoose2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/inheritsLoose"));

var _assertThisInitialized2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/assertThisInitialized"));

var createURI = function createURI() {
  return null;
};
/**
 * Describes the root queries, param definitions and other metadata for a given
 * path (URI).
 */


var RelayRoute =
/*#__PURE__*/
function (_RelayQueryConfig) {
  (0, _inheritsLoose2["default"])(RelayRoute, _RelayQueryConfig);

  function RelayRoute(initialVariables, uri) {
    var _this;

    _this = _RelayQueryConfig.call(this, initialVariables) || this;
    var constructor = _this.constructor;
    var routeName = constructor.routeName,
        path = constructor.path;
    !(constructor !== RelayRoute) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayRoute: Abstract class cannot be instantiated.') : require("fbjs/lib/invariant")(false) : void 0;
    !routeName ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, '%s: Subclasses of RelayRoute must define a `routeName`.', constructor.name || '<<anonymous>>') : require("fbjs/lib/invariant")(false) : void 0; // $FlowIssue #9905535 - Object.defineProperty doesn't understand getters

    Object.defineProperty((0, _assertThisInitialized2["default"])((0, _assertThisInitialized2["default"])(_this)), 'uri', {
      enumerable: true,
      get: function get() {
        if (!uri && path) {
          uri = createURI(constructor, this.params);
        }

        return uri;
      }
    });
    return _this;
  }

  var _proto = RelayRoute.prototype;

  _proto.prepareVariables = function prepareVariables(prevVariables) {
    var _this$constructor = this.constructor,
        paramDefinitions = _this$constructor.paramDefinitions,
        prepareParams = _this$constructor.prepareParams,
        routeName = _this$constructor.routeName;
    var params = prevVariables;

    if (prepareParams) {
      /* $FlowFixMe(>=0.17.0) - params is ?Tv but prepareParams expects Tv */
      params = prepareParams(params);
    }

    if (paramDefinitions) {
      require("fbjs/lib/forEachObject")(paramDefinitions, function (paramDefinition, paramName) {
        if (params) {
          if (params.hasOwnProperty(paramName)) {
            return;
          } else {
            // Backfill param so that a call variable is created for it.
            params[paramName] = undefined;
          }
        }

        !!paramDefinition.required ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayRoute: Missing required parameter `%s` in `%s`. Check the ' + 'supplied params or URI.', paramName, routeName) : require("fbjs/lib/invariant")(false) : void 0;
      });
    }

    return params;
  };

  RelayRoute.injectURICreator = function injectURICreator(creator) {
    createURI = creator;
  };

  return RelayRoute;
}(require("./RelayQueryConfig"));

module.exports = RelayRoute;