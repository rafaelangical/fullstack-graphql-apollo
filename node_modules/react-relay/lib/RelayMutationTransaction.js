/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *  strict-local
 * @format
 */
'use strict';

var _defineProperty2 = require("@babel/runtime/helpers/interopRequireDefault")(require("@babel/runtime/helpers/defineProperty"));

/**
 * @internal
 */
var RelayMutationTransaction =
/*#__PURE__*/
function () {
  function RelayMutationTransaction(mutationQueue, id) {
    (0, _defineProperty2["default"])(this, "_rolledBack", false);
    this._id = id;
    this._mutationQueue = mutationQueue;
  }
  /**
   * Applies the transaction to the local store (ie. as an optimistic update).
   *
   * Returns itself so as to provide a "fluent interface".
   */


  var _proto = RelayMutationTransaction.prototype;

  _proto.applyOptimistic = function applyOptimistic() {
    var status = this.getStatus();
    !(status === require("./RelayMutationTransactionStatus").CREATED) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayMutationTransaction: Only transactions with status `CREATED` ' + 'can be applied.') : require("fbjs/lib/invariant")(false) : void 0;

    this._mutationQueue.applyOptimistic(this._id);

    return this;
  };
  /**
   * Commits the transaction (ie. performs a server update).
   *
   * Returns itself so as to provide a "fluent interface".
   */


  _proto.commit = function commit() {
    var status = this.getStatus();
    !(status === require("./RelayMutationTransactionStatus").CREATED || status === require("./RelayMutationTransactionStatus").UNCOMMITTED) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayMutationTransaction: Only transactions with status `CREATED` or ' + '`UNCOMMITTED` can be committed.') : require("fbjs/lib/invariant")(false) : void 0;

    this._mutationQueue.commit(this._id);

    return this;
  };

  _proto.recommit = function recommit() {
    var status = this.getStatus();
    !(status === require("./RelayMutationTransactionStatus").COLLISION_COMMIT_FAILED || status === require("./RelayMutationTransactionStatus").COMMIT_FAILED || status === require("./RelayMutationTransactionStatus").CREATED) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayMutationTransaction: Only transaction with status ' + '`CREATED`, `COMMIT_FAILED`, or `COLLISION_COMMIT_FAILED` can be ' + 'recomitted.') : require("fbjs/lib/invariant")(false) : void 0;

    this._mutationQueue.commit(this._id);
  };

  _proto.rollback = function rollback() {
    var status = this.getStatus();
    !(status === require("./RelayMutationTransactionStatus").COLLISION_COMMIT_FAILED || status === require("./RelayMutationTransactionStatus").COMMIT_FAILED || status === require("./RelayMutationTransactionStatus").COMMIT_QUEUED || status === require("./RelayMutationTransactionStatus").CREATED || status === require("./RelayMutationTransactionStatus").UNCOMMITTED) ? process.env.NODE_ENV !== "production" ? require("fbjs/lib/invariant")(false, 'RelayMutationTransaction: Only transactions with status `CREATED`, ' + '`UNCOMMITTED`, `COMMIT_FAILED`, `COLLISION_COMMIT_FAILED`, or ' + '`COMMIT_QUEUED` can be rolled back.') : require("fbjs/lib/invariant")(false) : void 0;
    this._rolledBack = true;

    this._mutationQueue.rollback(this._id);
  };

  _proto.getError = function getError() {
    return this._mutationQueue.getError(this._id);
  };

  _proto.getStatus = function getStatus() {
    return this._rolledBack ? require("./RelayMutationTransactionStatus").ROLLED_BACK : this._mutationQueue.getStatus(this._id);
  };

  _proto.getHash = function getHash() {
    return "".concat(this._id, ":").concat(this.getStatus());
  };

  _proto.getID = function getID() {
    return this._id;
  };

  return RelayMutationTransaction;
}();

module.exports = RelayMutationTransaction;